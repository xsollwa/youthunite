---
import Layout from '../layouts/Layout.astro';
import { getServerUser, getTokenFromCookie } from '$lib/server/auth';
import { Button } from '$lib/components/ui/button/index.js';
import AdminStoryButtons from '$lib/components/admin-story-buttons.svelte';
import AdminEventButtons from '$lib/components/admin-event-buttons.svelte';

const cookieHeader = Astro.request.headers.get('cookie');
const token = getTokenFromCookie(cookieHeader);

if (!token) {
  return Astro.redirect('/login?redirect=/admin');
}

const user = await getServerUser(token);
if (!user) {
  return Astro.redirect('/login?redirect=/admin');
}

if (user.tier.toLowerCase() !== 'admin') {
  return Astro.redirect('/dashboard');
}

let users = [];
let events = [];
let pendingEvents = [];
let pendingStories = [];
let allStories = [];
try {
  const [uRes, eRes, peRes, psRes, asRes] = await Promise.all([
    fetch(`${import.meta.env.PUBLIC_API_URL}/admin/users`, { headers: { Authorization: `Bearer ${token}` } }),
    fetch(`${import.meta.env.PUBLIC_API_URL}/admin/events`, { headers: { Authorization: `Bearer ${token}` } }),
    fetch(`${import.meta.env.PUBLIC_API_URL}/admin/pending-events`, { headers: { Authorization: `Bearer ${token}` } }),
    fetch(`${import.meta.env.PUBLIC_API_URL}/admin/pending-stories`, { headers: { Authorization: `Bearer ${token}` } }),
    fetch(`${import.meta.env.PUBLIC_API_URL}/admin/all-stories`, { headers: { Authorization: `Bearer ${token}` } })
  ]);

  const uData = await uRes.json();
  const eData = await eRes.json();
  const peData = await peRes.json();
  const psData = await psRes.json();
  const asData = await asRes.json();

  users = uData.success ? (uData.users || []) : [];
  events = eData.success ? (eData.events || []) : [];
  pendingEvents = peData.success ? (peData.events || []) : [];
  pendingStories = psData.success ? (psData.stories || []) : [];
  allStories = asData.success ? (asData.stories || []) : [];
} catch (err) {
  console.error('Admin fetch error', err);
}
---

<Layout title="Admin">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-4">Admin Panel</h1>
    <p class="mb-6">Welcome, {user.name}. Use this panel to get a quick overview and perform light admin actions.</p>

    <section class="mb-8">
      <h2 class="text-lg font-semibold mb-2">Users</h2>
      {users.length === 0 ? (
        <p>No users found or failed to load.</p>
      ) : (
        <div class="overflow-x-auto bg-white rounded shadow">
          <table class="w-full text-left">
            <thead>
              <tr>
                <th class="px-4 py-2">Name</th>
                <th class="px-4 py-2">Email</th>
                <th class="px-4 py-2">Tier</th>
                <th class="px-4 py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {users.map((u: any) => (
                <tr class="border-t">
                  <td class="px-4 py-2">{u.name}</td>
                  <td class="px-4 py-2">{u.email}</td>
                  <td class="px-4 py-2">{u.tier}</td>
                  <td class="px-4 py-2 flex flex-row">
                    <form method="post" action="/api/admin/delete-user" onsubmit="return confirm('Delete user?');">
                      <input type="hidden" name="id" value={u.id} />
                      <Button type="submit" variant="destructive" size="sm" class="ml-2">Delete</Button>
                    </form>
                    {u.tier && u.tier.toLowerCase() !== 'admin' ? (
                      <form method="post" action="/api/admin/add-admin" onsubmit={`return confirm('Make ${u.name} an admin?');`}>
                        <input type="hidden" name="id" value={u.id} />
                        <Button type="submit" variant="destructive" size="sm" class="ml-2">Make admin</Button>
                      </form>
                    ) : null}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </section>

    <section class="mb-8">
      <h2 class="text-lg font-semibold mb-2">Pending Events ({pendingEvents.length})</h2>
      {pendingEvents.length === 0 ? (
        <p class="text-green-600">No pending events - all caught up! üéâ</p>
      ) : (
        <div class="space-y-4">
          {pendingEvents.map((ev: any) => (
            <div class="p-4 bg-yellow-50 border border-yellow-200 rounded shadow">
              <div class="flex justify-between items-start">
                <div class="flex-1">
                  <div class="font-semibold text-lg">{ev.title}</div>
                  <div class="text-sm text-gray-600 mb-2">
                    üìÖ {new Date(ev.start_time).toLocaleDateString()} - {new Date(ev.end_time).toLocaleDateString()}
                  </div>
                  <div class="text-sm text-gray-600 mb-2">üìç {ev.location}</div>
                  <div class="text-sm text-gray-600 mb-2">üë§ Organizer: {ev.organizer?.name} ({ev.organizer?.email})</div>
                  <div class="text-sm mb-3">{ev.description}</div>
                  <div class="text-xs text-gray-500">Submitted: {new Date(ev.created_at).toLocaleDateString()}</div>
                </div>
                <div class="flex space-x-2">
                  <AdminEventButtons eventId={ev.id} client:load />
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </section>

    <section class="mb-8">
      <h2 class="text-lg font-semibold mb-2">Pending Stories ({pendingStories.length})</h2>
      {pendingStories.length === 0 ? (
        <p class="text-green-600">No pending stories - all caught up! üéâ</p>
      ) : (
        <div class="space-y-4">
          {pendingStories.map((story: any) => (
            <div class="p-4 bg-blue-50 border border-blue-200 rounded shadow">
              <div class="flex justify-between items-start">
                <div class="flex-1">
                  <div class="font-semibold text-lg">{story.title}</div>
                  <div class="text-sm text-gray-600 mb-2">‚úçÔ∏è By: {story.author_name} {story.author_age ? `(${story.author_age})` : ''}</div>
                  <div class="text-sm text-gray-600 mb-2">üìß {story.author_email}</div>
                  {story.category && (
                    <div class="text-sm text-gray-600 mb-2">üè∑Ô∏è Category: {story.category}</div>
                  )}
                  {story.tags && story.tags.length > 0 && (
                    <div class="text-sm text-gray-600 mb-2">üè∑Ô∏è Tags: {story.tags.join(', ')}</div>
                  )}
                  <div class="text-sm mb-3 max-h-32 overflow-y-auto bg-gray-50 p-2 rounded">{story.content}</div>
                  <div class="text-xs text-gray-500">Submitted: {new Date(story.created_at).toLocaleDateString()}</div>
                </div>
                <div class="flex flex-col space-y-2">
                  <AdminStoryButtons storyId={story.id} client:load />
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </section>

    <section>
      <h2 class="text-lg font-semibold mb-2">All Events</h2>
      {events.length === 0 ? (
        <p>No events found or failed to load.</p>
      ) : (
        <div class="space-y-4">
          {events.map((ev: any) => (
                <div class="p-4 bg-white rounded shadow flex justify-between items-center">
              <div>
                <div class="font-semibold">{ev.title}</div>
                <div class="text-sm text-gray-600">{ev.start_time} ‚Äî {ev.location}</div>
              </div>
              <div>
                <form method="post" action="/api/admin/delete-event" onsubmit="return confirm('Delete event?');">
                  <input type="hidden" name="id" value={ev.id} />
                  <Button type="submit" variant="destructive" size="sm">Delete</Button>
                </form>
              </div>
            </div>
          ))}
        </div>
      )}
    </section>

    <section>
      <h2 class="text-lg font-semibold mb-2">All Stories</h2>
      {allStories.length === 0 ? (
        <p>No stories found or failed to load.</p>
      ) : (
        <div class="space-y-4">
          {allStories.map((story: any) => (
            <div class="p-4 bg-white rounded shadow flex justify-between items-start">
              <div class="flex-1">
                <div class="font-semibold text-lg">{story.title}</div>
                <div class="text-sm text-gray-600 mb-1">‚úçÔ∏è By: {story.author_name} {story.author_age ? `(${story.author_age})` : ''}</div>
                <div class="text-sm text-gray-600 mb-1">üìß {story.author_email}</div>
                {story.category && (
                  <div class="text-sm text-gray-600 mb-1">üè∑Ô∏è Category: {story.category}</div>
                )}
                {story.tags && story.tags.length > 0 && (
                  <div class="text-sm text-gray-600 mb-1">üè∑Ô∏è Tags: {story.tags.join(', ')}</div>
                )}
                <div class="text-sm mb-2 max-h-20 overflow-y-auto bg-gray-50 p-2 rounded">{story.content}</div>
                <div class="flex space-x-4 text-xs text-gray-500">
                  <span>Status: <span class={story.verification_status === 'approved' ? 'text-green-600' : story.verification_status === 'rejected' ? 'text-red-600' : 'text-yellow-600'}>{story.verification_status}</span></span>
                  {story.is_published ? <span class="text-green-600">Published</span> : <span class="text-gray-500">Not Published</span>}
                  <span>Created: {new Date(story.created_at).toLocaleDateString()}</span>
                </div>
              </div>
              <div>
                <form method="post" action="/api/admin/delete-story" onsubmit="return confirm('Delete story?');">
                  <input type="hidden" name="id" value={story.id} />
                  <Button type="submit" variant="destructive" size="sm">Delete</Button>
                </form>
              </div>
            </div>
          ))}
        </div>
      )}
    </section>
  </div>
</Layout>

<style>
.container { max-width: 1100px; }
.btn { padding: 0.5rem 0.75rem; border-radius: 6px; }
.btn-secondary { background: #efefef; border: 1px solid #ddd; }
</style>
