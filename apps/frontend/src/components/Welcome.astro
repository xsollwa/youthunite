---
import { Button } from '$lib/components/ui/button';
---

<style>
	@import url('https://fonts.googleapis.com/css2?family=Oswald:wght@700&display=swap');

	@keyframes float {
		0% {
			transform: translateY(0px) rotate(0deg);
		}
		100% {
			transform: translateY(-100px) rotate(360deg);
		}
	}

	@keyframes pulse {
		0%, 100% {
			transform: scale(1);
		}
		50% {
			transform: scale(1.05);
		}
	}

	@keyframes fadeInUp {
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.hero::before {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="40" r="3" fill="rgba(255,107,53,0.1)"/><circle cx="40" cy="80" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="70" cy="70" r="1" fill="rgba(255,107,53,0.1)"/></svg>');
		animation: float 20s infinite linear;
	}

	.intro-overlay.hidden {
		opacity: 0;
		pointer-events: none;
	}

	.fade-in {
		opacity: 0;
		transform: translateY(30px);
		animation: fadeInUp 0.8s ease forwards;
	}

	.fade-in:nth-child(1) {
		animation-delay: 0.1s;
	}
	.fade-in:nth-child(2) {
		animation-delay: 0.2s;
	}
	.fade-in:nth-child(3) {
		animation-delay: 0.3s;
	}
</style>
<section class="py-24" id="mission" style="background: var(--light-grey);">
    <div class="max-w-6xl mx-auto px-8 text-center">
        <h2 class="text-4xl font-bold mb-4" style="color: var(--blue-dark);">Our Mission</h2>
        <p class="text-xl mb-16 max-w-2xl mx-auto" style="color: var(--dark-grey);">
            EMPOWERING YOUNG VOICES
        </p>

        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">

            <div class="fade-in bg-white p-10 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:-translate-y-3">
                <div class="mb-4 flex justify-center text-[var(--blue-dark)]">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                      <path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456ZM16.894 20.567 16.5 21.75l-.394-1.183a2.25 2.25 0 0 0-1.423-1.423L13.5 18.75l1.183-.394a2.25 2.25 0 0 0 1.423-1.423l.394-1.183.394 1.183a2.25 2.25 0 0 0 1.423 1.423l1.183.394-1.183.394a2.25 2.25 0 0 0-1.423 1.423Z" />
                    </svg>
                </div>
                <h3 class="text-2xl font-semibold mb-4" style="color: var(--blue-dark);">Connect</h3>
                <p style="color: var(--dark-grey);">
                    Join a network of passionate young activists worldwide. Find your community and amplify your voice.
                </p>
            </div>

    
            <div class="fade-in bg-white p-10 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:-translate-y-3">
                <div class="mb-4 flex justify-center text-[var(--blue-dark)]">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                      <path stroke-linecap="round" stroke-linejoin="round" d="m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z" />
                    </svg>
                </div>
                <h3 class="text-2xl font-semibold mb-4" style="color: var(--blue-dark);">Learn</h3>
                <p style="color: var(--dark-grey);">
                    Access tools, resources, and training to build your advocacy skills and maximize your impact.
                </p>
            </div>

  
            <div class="fade-in bg-white p-10 rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:-translate-y-3">
                <div class="mb-4 flex justify-center text-[var(--blue-dark)]">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                      <path stroke-linecap="round" stroke-linejoin="round" d="m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z" />
                    </svg>
                </div>
                <h3 class="text-2xl font-semibold mb-4" style="color: var(--blue-dark);">Act</h3>
                <p style="color: var(--dark-grey);">
                    Turn your passion into action. Launch campaigns, organize events, and create meaningful change.
                </p>
            </div>
        </div>
    </div>
</section>


<script>
  // TODO: type all this
	document.addEventListener('DOMContentLoaded', function() {
		const introOverlay = document.getElementById('introOverlay');
		const hasSeenIntro = sessionStorage.getItem('youthunite_intro_shown');
    // if (!introOverlay || !hasSeenIntro) {
    //   throw new Error('Elements no showy')
    // }
		
		if (hasSeenIntro) {
			introOverlay.style.display = 'none';
		} else {
			initIntroAnimation();
		}
	});

	function initIntroAnimation() {
		const canvas = document.getElementById('introCanvas') as HTMLCanvasElement | null;
    if (!canvas) {
      throw new Error('Canvas no showy')
    }

		const ctx = canvas.getContext('2d');
		const logo = document.getElementById('introLogo');
		const introOverlay = document.getElementById('introOverlay');

		const KEYWORDS = [
			'CONNECT', 'EMPOWER', 'MOBILIZE', 'YOUTH', 'ORGANIZE',
			'EVENTS', 'VOLUNTEERING', 'CREATION', 'COURSES',
			'STORYTELLING', 'STUDENT', 'ORGANIZERS', 'PLATFORM',
			'NONPROFIT', 'PROJECTS', 'LEADERS', 'LEARNING',
			'SIGN UP', 'COMMUNITY', 'TOOLS', 'ENGAGE',
			'SUPPORT', 'COLLABORATE', 'IMPACT', 'ACTION',
			'EDUCATION', 'NETWORK', 'GROW', 'SKILLS', 'TEAMWORK'
		];

		let words: Word[] = [];
		let startTime: number | null = null;
		const spreadDuration = 1000;
		const holdDuration = 1000;    
		const totalDuration = spreadDuration + holdDuration;

		const colors = ['#ff6600', '#002147', '#3399ff'];
    
		function resize() {
			canvas!.width = window.innerWidth;
			canvas!.height = window.innerHeight;
		}
		window.addEventListener('resize', resize);
		resize();

		function initWords() {
			words = KEYWORDS.map(word => {
				return {
					text: word,
					x: canvas!.width / 2,
					y: canvas!.height / 2,
					dx: (Math.random() - 0.5) * 5,
					dy: (Math.random() - 0.5) * 5,
					opacity: 1,
					size: 42 + Math.random() * 14,
					color: colors[Math.floor(Math.random() * colors.length)],
				};
			});
		}

		function easeOut(t: number) {
			return 1 - Math.pow(1 - t, 3);
		}

		function animate(timestamp: number) {
      if (!ctx || !logo || !introOverlay) {
        throw new Error('random if check here which will probably never throw (foreshadowing)')
      }
			if (!startTime) startTime = timestamp;
			const elapsed = timestamp - startTime;

			ctx.clearRect(0, 0, canvas!.width, canvas!.height);

			ctx.fillStyle = '#fff';
			ctx.fillRect(0, 0, canvas!.width, canvas!.height);

			if (elapsed < spreadDuration) {
				const t = elapsed / spreadDuration;
				const easeT = easeOut(t);

				words.forEach(word => {
					const moveX = word.dx * easeT * 350; 
					const moveY = word.dy * easeT * 350;
					const x = word.x + moveX;
					const y = word.y + moveY;

					ctx.font = `700 ${word.size}px Oswald, sans-serif`;
					ctx.textAlign = 'center';
					ctx.textBaseline = 'middle';

					ctx.fillStyle = word.color;
					ctx.shadowColor = 'rgba(0,0,0,0.3)'; 
					ctx.shadowBlur = 4;
					ctx.globalAlpha = 1 - easeT;

					ctx.fillText(word.text, x, y);

					ctx.shadowBlur = 0;
					ctx.globalAlpha = 1;
				});

				const scale = easeT;
				logo.style.transform = `translate(-50%, -50%) scale(${scale})`;

			} else if (elapsed < totalDuration) {
				logo.style.transform = 'translate(-50%, -50%) scale(1)';

			} else {
				introOverlay.classList.add('hidden');
				sessionStorage.setItem('youthunite_intro_shown', 'true');
				
				setTimeout(() => {
					introOverlay.style.display = 'none';
				}, 500);
				return;
			}

			requestAnimationFrame(animate);
		}

		initWords();
		requestAnimationFrame(animate);
	}

  interface Word {
    text: string;
    x: number;
    y: number;
    dx: number;
    dy: number;
    opacity: number;
    size: number;
    color: string;
  }
</script>
